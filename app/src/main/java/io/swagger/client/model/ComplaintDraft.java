/*
 * Сервис приема сообщений о проблемах
 * Здесь описаны методы сервиса приема сообщений о проблемах
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.io.Serializable;
import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Category;
import io.swagger.client.model.Location;
import io.swagger.client.model.Person;
import java.io.IOException;
import io.swagger.v3.oas.annotations.media.Schema;
import java.util.ArrayList;
import java.util.List;

/**
 * ComplaintDraft
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-06-22T08:36:37.564Z[GMT]")public class ComplaintDraft implements Serializable {

  @SerializedName("id")
  private Long id = null;

  @SerializedName("category")
  private Category category = null;

  @SerializedName("dangerLevel")
  private Integer dangerLevel = null;

  @SerializedName("title")
  private String title = null;

  @SerializedName("description")
  private String description = null;

  @SerializedName("location")
  private Location location = null;

  @SerializedName("complaintTimestamp")
  private String complaintTimestamp = null;

  @SerializedName("creationTimestamp")
  private String creationTimestamp = null;

  @SerializedName("fileLink")
  private List<String> fileLink = null;

  @SerializedName("person")
  private Person person = null;

  @SerializedName("userId")
  private Long userId = null;

  @SerializedName("status")
  private Integer status = null;

  @SerializedName("visible")
  private Boolean visible = null;

  @SerializedName("anonymous")
  private Boolean anonymous = null;
  public ComplaintDraft id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * minimum: 0
  * @return id
  **/
  @Schema(required = true, description = "")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public ComplaintDraft category(Category category) {
    this.category = category;
    return this;
  }

  

  /**
  * Get category
  * @return category
  **/
  @Schema(description = "")
  public Category getCategory() {
    return category;
  }
  public void setCategory(Category category) {
    this.category = category;
  }
  public ComplaintDraft dangerLevel(Integer dangerLevel) {
    this.dangerLevel = dangerLevel;
    return this;
  }

  

  /**
  * Get dangerLevel
  * minimum: 1
  * maximum: 10
  * @return dangerLevel
  **/
  @Schema(description = "")
  public Integer getDangerLevel() {
    return dangerLevel;
  }
  public void setDangerLevel(Integer dangerLevel) {
    this.dangerLevel = dangerLevel;
  }
  public ComplaintDraft title(String title) {
    this.title = title;
    return this;
  }

  

  /**
  * Get title
  * @return title
  **/
  @Schema(description = "")
  public String getTitle() {
    return title;
  }
  public void setTitle(String title) {
    this.title = title;
  }
  public ComplaintDraft description(String description) {
    this.description = description;
    return this;
  }

  

  /**
  * Get description
  * @return description
  **/
  @Schema(description = "")
  public String getDescription() {
    return description;
  }
  public void setDescription(String description) {
    this.description = description;
  }
  public ComplaintDraft location(Location location) {
    this.location = location;
    return this;
  }

  

  /**
  * Get location
  * @return location
  **/
  @Schema(description = "")
  public Location getLocation() {
    return location;
  }
  public void setLocation(Location location) {
    this.location = location;
  }
  public ComplaintDraft complaintTimestamp(String complaintTimestamp) {
    this.complaintTimestamp = complaintTimestamp;
    return this;
  }

  

  /**
  * Дата проблемы
  * @return complaintTimestamp
  **/
  @Schema(description = "Дата проблемы")
  public String getComplaintTimestamp() {
    return complaintTimestamp;
  }
  public void setComplaintTimestamp(String complaintTimestamp) {
    this.complaintTimestamp = complaintTimestamp;
  }
  public ComplaintDraft creationTimestamp(String creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
    return this;
  }

  

  /**
  * Дата создания проблемы
  * @return creationTimestamp
  **/
  @Schema(description = "Дата создания проблемы")
  public String getCreationTimestamp() {
    return creationTimestamp;
  }
  public void setCreationTimestamp(String creationTimestamp) {
    this.creationTimestamp = creationTimestamp;
  }
  public ComplaintDraft fileLink(List<String> fileLink) {
    this.fileLink = fileLink;
    return this;
  }

  public ComplaintDraft addFileLinkItem(String fileLinkItem) {
    if (this.fileLink == null) {
      this.fileLink = new ArrayList<String>();
    }
    this.fileLink.add(fileLinkItem);
    return this;
  }

  /**
  * Get fileLink
  * @return fileLink
  **/
  @Schema(description = "")
  public List<String> getFileLink() {
    return fileLink;
  }
  public void setFileLink(List<String> fileLink) {
    this.fileLink = fileLink;
  }
  public ComplaintDraft person(Person person) {
    this.person = person;
    return this;
  }

  

  /**
  * Get person
  * @return person
  **/
  @Schema(description = "")
  public Person getPerson() {
    return person;
  }
  public void setPerson(Person person) {
    this.person = person;
  }
  public ComplaintDraft userId(Long userId) {
    this.userId = userId;
    return this;
  }

  

  /**
  * Get userId
  * minimum: 0
  * @return userId
  **/
  @Schema(required = true, description = "")
  public Long getUserId() {
    return userId;
  }
  public void setUserId(Long userId) {
    this.userId = userId;
  }
  public ComplaintDraft status(Integer status) {
    this.status = status;
    return this;
  }

  

  /**
  * Номер шага, который должен быть заполнен на форме следующим
  * @return status
  **/
  @Schema(description = "Номер шага, который должен быть заполнен на форме следующим")
  public Integer getStatus() {
    return status;
  }
  public void setStatus(Integer status) {
    this.status = status;
  }
  public ComplaintDraft visible(Boolean visible) {
    this.visible = visible;
    return this;
  }

  

  /**
  * Get visible
  * @return visible
  **/
  @Schema(description = "")
  public Boolean isVisible() {
    return visible;
  }
  public void setVisible(Boolean visible) {
    this.visible = visible;
  }
  public ComplaintDraft anonymous(Boolean anonymous) {
    this.anonymous = anonymous;
    return this;
  }

  

  /**
  * Get anonymous
  * @return anonymous
  **/
  @Schema(description = "")
  public Boolean isAnonymous() {
    return anonymous;
  }
  public void setAnonymous(Boolean anonymous) {
    this.anonymous = anonymous;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ComplaintDraft complaintDraft = (ComplaintDraft) o;
    return Objects.equals(this.id, complaintDraft.id) &&
        Objects.equals(this.category, complaintDraft.category) &&
        Objects.equals(this.dangerLevel, complaintDraft.dangerLevel) &&
        Objects.equals(this.title, complaintDraft.title) &&
        Objects.equals(this.description, complaintDraft.description) &&
        Objects.equals(this.location, complaintDraft.location) &&
        Objects.equals(this.complaintTimestamp, complaintDraft.complaintTimestamp) &&
        Objects.equals(this.creationTimestamp, complaintDraft.creationTimestamp) &&
        Objects.equals(this.fileLink, complaintDraft.fileLink) &&
        Objects.equals(this.person, complaintDraft.person) &&
        Objects.equals(this.userId, complaintDraft.userId) &&
        Objects.equals(this.status, complaintDraft.status) &&
        Objects.equals(this.visible, complaintDraft.visible) &&
        Objects.equals(this.anonymous, complaintDraft.anonymous);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, category, dangerLevel, title, description, location, complaintTimestamp, creationTimestamp, fileLink, person, userId, status, visible, anonymous);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ComplaintDraft {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    dangerLevel: ").append(toIndentedString(dangerLevel)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    complaintTimestamp: ").append(toIndentedString(complaintTimestamp)).append("\n");
    sb.append("    creationTimestamp: ").append(toIndentedString(creationTimestamp)).append("\n");
    sb.append("    fileLink: ").append(toIndentedString(fileLink)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    visible: ").append(toIndentedString(visible)).append("\n");
    sb.append("    anonymous: ").append(toIndentedString(anonymous)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
