/*
 * Сервис приема сообщений о проблемах
 * Здесь описаны методы сервиса приема сообщений о проблемах
 *
 * OpenAPI spec version: 0.0.1-SNAPSHOT
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package io.swagger.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.client.model.Person;
import io.swagger.v3.oas.annotations.media.Schema;
import java.io.IOException;

/**
 * HistoryStatus
 */

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.JavaClientCodegen", date = "2019-06-22T08:36:37.564Z[GMT]")public class HistoryStatus {

  @SerializedName("id")
  private Long id = null;

  @SerializedName("comment")
  private String comment = null;
  /**
   * Gets or Sets previousStatus
   */
  @JsonAdapter(PreviousStatusEnum.Adapter.class)
  public enum PreviousStatusEnum {
    SOLVED("SOLVED"),
    UNSOLVED("UNSOLVED");

    private String value;

    PreviousStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static PreviousStatusEnum fromValue(String text) {
      for (PreviousStatusEnum b : PreviousStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<PreviousStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PreviousStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PreviousStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return PreviousStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("previousStatus")
  private PreviousStatusEnum previousStatus = null;
  /**
   * Gets or Sets currentStatus
   */
  @JsonAdapter(CurrentStatusEnum.Adapter.class)
  public enum CurrentStatusEnum {
    SOLVED("SOLVED"),
    UNSOLVED("UNSOLVED");

    private String value;

    CurrentStatusEnum(String value) {
      this.value = value;
    }
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }
    public static CurrentStatusEnum fromValue(String text) {
      for (CurrentStatusEnum b : CurrentStatusEnum.values()) {
        if (String.valueOf(b.value).equals(text)) {
          return b;
        }
      }
      return null;
    }
    public static class Adapter extends TypeAdapter<CurrentStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CurrentStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CurrentStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value = jsonReader.nextString();
        return CurrentStatusEnum.fromValue(String.valueOf(value));
      }
    }
  }
  @SerializedName("currentStatus")
  private CurrentStatusEnum currentStatus = null;

  @SerializedName("editor")
  private Person editor = null;

  @SerializedName("timestamp")
  private String timestamp = null;
  public HistoryStatus id(Long id) {
    this.id = id;
    return this;
  }

  

  /**
  * Get id
  * minimum: 0
  * @return id
  **/
  @Schema(description = "")
  public Long getId() {
    return id;
  }
  public void setId(Long id) {
    this.id = id;
  }
  public HistoryStatus comment(String comment) {
    this.comment = comment;
    return this;
  }

  

  /**
  * Get comment
  * @return comment
  **/
  @Schema(description = "")
  public String getComment() {
    return comment;
  }
  public void setComment(String comment) {
    this.comment = comment;
  }
  public HistoryStatus previousStatus(PreviousStatusEnum previousStatus) {
    this.previousStatus = previousStatus;
    return this;
  }

  

  /**
  * Get previousStatus
  * @return previousStatus
  **/
  @Schema(description = "")
  public PreviousStatusEnum getPreviousStatus() {
    return previousStatus;
  }
  public void setPreviousStatus(PreviousStatusEnum previousStatus) {
    this.previousStatus = previousStatus;
  }
  public HistoryStatus currentStatus(CurrentStatusEnum currentStatus) {
    this.currentStatus = currentStatus;
    return this;
  }

  

  /**
  * Get currentStatus
  * @return currentStatus
  **/
  @Schema(description = "")
  public CurrentStatusEnum getCurrentStatus() {
    return currentStatus;
  }
  public void setCurrentStatus(CurrentStatusEnum currentStatus) {
    this.currentStatus = currentStatus;
  }
  public HistoryStatus editor(Person editor) {
    this.editor = editor;
    return this;
  }

  

  /**
  * Get editor
  * @return editor
  **/
  @Schema(description = "")
  public Person getEditor() {
    return editor;
  }
  public void setEditor(Person editor) {
    this.editor = editor;
  }
  public HistoryStatus timestamp(String timestamp) {
    this.timestamp = timestamp;
    return this;
  }

  

  /**
  * Get timestamp
  * @return timestamp
  **/
  @Schema(description = "")
  public String getTimestamp() {
    return timestamp;
  }
  public void setTimestamp(String timestamp) {
    this.timestamp = timestamp;
  }
  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HistoryStatus historyStatus = (HistoryStatus) o;
    return Objects.equals(this.id, historyStatus.id) &&
        Objects.equals(this.comment, historyStatus.comment) &&
        Objects.equals(this.previousStatus, historyStatus.previousStatus) &&
        Objects.equals(this.currentStatus, historyStatus.currentStatus) &&
        Objects.equals(this.editor, historyStatus.editor) &&
        Objects.equals(this.timestamp, historyStatus.timestamp);
  }

  @Override
  public int hashCode() {
    return java.util.Objects.hash(id, comment, previousStatus, currentStatus, editor, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HistoryStatus {\n");
    
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    comment: ").append(toIndentedString(comment)).append("\n");
    sb.append("    previousStatus: ").append(toIndentedString(previousStatus)).append("\n");
    sb.append("    currentStatus: ").append(toIndentedString(currentStatus)).append("\n");
    sb.append("    editor: ").append(toIndentedString(editor)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}
